# This is a basic workflow to help you get started with Actions
name: Ubuntu Aliyunpan image
# Controls when the action will run.
on:
  push:
    branches:
#      - main
      - dev
  pull_request:
    branches:
#      - main
      - dev

jobs:
  buildx:
    runs-on: ubuntu-latest
    environment: env
    steps:
      - name: Checkout
        run: git clone https://github.com/SeeDLL-Docker/Aliyunpan.git .

      - name: Get current date
        id: date
        run: echo "::set-output name=today::$(date +'%Y-%m-%d_%H-%M')"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Read previous commit Dockerfile and get previous version
        run: |
          git log --pretty=format:%H | awk 'NR==2' > previous_commit.txt
          git show $(cat previous_commit.txt):context/Dockerfile | grep -n "ALIYUNPAN_VER=" | awk -F: '{print $2}'|cut -d "=" -f 2 >> ALIYUNPAN_PREVIOUS_VER.txt
          cat ALIYUNPAN_PREVIOUS_VER.txt
          prev_version=$(cat ALIYUNPAN_PREVIOUS_VER.txt)
          echo "::set-output name=prev_version::$prev_version"

      - name: Read current version
        run: |
          echo `grep -n "ALIYUNPAN_VER=" context/Dockerfile`|awk -F: '{print $2}'|cut -d "=" -f 2 >> ALIYUNPAN_CURRENT_VER.txt
          cat ALIYUNPAN_CURRENT_VER.txt 
          current_version=$(cat ALIYUNPAN_CURRENT_VER.txt)
          echo "::set-output name=current_version::$current_version"

      - name: Check if version changed
        id: version_changed
        run: |
          previous_version=${{ steps.get_prev_version.outputs.prev_version }}
          current_version=${{ steps.get_current_version.outputs.current_version }}
          
          # 比较上一次提交的版本号与当前的版本号
          # 如果版本号相同，将 build_required 设置为 false，不进行构建
          # 如果版本号不同，将 build_required 设置为 true，进行构建
          if [[ "$previous_version" == "$current_version" ]]; then
            echo "Version unchanged. Skipping build."
            echo "::set-output name=build_required::false"
          else
            echo "Version changed. Building image."
            echo "::set-output name=build_required::true"
          fi

      - name: Build Docker image
        if: steps.version_changed.outputs.build_required == 'true'
        run: |
          docker buildx build --load -f ./context/Dockerfile \
            --tag ${{ secrets.REGISTRY }}/${{ secrets.ALIYUNPAN }}:latest \
            --tag ${{ secrets.REGISTRY }}/${{ secrets.ALIYUNPAN }}:${{ env.ALIYUNPAN_VER }} \
            ./context

      # 只有main分支，并且符合手动推送或定时打包条件时执行推送
      - name: Push Docker image
        if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || (github.event_name == 'schedule' && github.ref == 'refs/heads/main'))
        run: |
          docker push ${{ secrets.REGISTRY }}/${{ secrets.BEDROCKCONNECT }}:latest
